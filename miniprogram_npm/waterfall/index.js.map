{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["const assert = require('assert');\n\nconst Node = {\n  child: require('child_process'),\n  fs: require('fs'),\n  os: require('os'),\n  path: require('path'),\n  process: process\n};\n\nconst Waterfall = {};\n\nWaterfall.chart = function(buffer, options = {}) {\n  var self = this;\n  // Copy options object to avoid mutating by reference:\n  options = JSON.parse(JSON.stringify(options));\n  if (!options.name) options.name = 'waterfall-' + Date.now();\n  if (!options.unit) options.unit = 'ms';\n  const events = self.events(buffer, options);\n  const html = self.html(events, options);\n  // Width and height depend on the CSS, borders, number of rows, and summary:\n  const width = 1280;\n  const height = 2 + (events.length * 20) + (20 + 5);\n  const png = self.png(html, width, height, options);\n  return png;\n};\n\nWaterfall.events = function(buffer, options) {\n  var self = this;\n  var string = buffer.toString('utf-8');\n  if (string[0] === '[') {\n    // Parse JSON array of events.\n    var events = JSON.parse(string);\n  } else {\n    // Split lines and parse JSON events.\n    var events = [];\n    string.split('\\n').forEach(\n      function(line) {\n        line = line.trim();\n        if (!line) return;\n        try {\n          events.push(JSON.parse(line));\n        } catch (error) {\n          throw new Error(error.message + ': ' + JSON.stringify(line));\n        }\n      }\n    );\n  }\n  events.forEach(\n    function(event) {\n      try {\n        if (!Number.isInteger(event.start) || event.start < 0) {\n          throw new Error('event.start is not a positive integer');\n        }\n        if (!Number.isInteger(event.end) || event.end < 0) {\n          throw new Error('event.end is not a positive integer');\n        }\n        if (event.end < event.start) {\n          throw new Error('event.end preceeds event.start');\n        }\n        if (typeof event.label !== 'string') {\n          throw new Error('event.label is not a string');\n        }\n        if (event.label.trim().length === 0) {\n          throw new Error('event.label is an empty string');\n        }\n      } catch (error) {\n        throw new Error(error.message + ': ' + JSON.stringify(event));\n      }\n    }\n  );\n  // TODO: Add an option to match or exclude label prefixes.\n  // This is useful when you only want to see certain events.\n  events.sort(\n    function(a, b) {\n      if (a.start < b.start) return -1;\n      if (b.start < a.start) return 1;\n      // Given the same start timestamp, we then want the longest event first:\n      // This is critical for calculating causal sums correctly.\n      if (a.end > b.end) return -1;\n      if (b.end > a.end) return 1;\n      if (a.label < b.label) return -1;\n      if (b.label < a.label) return 1;\n      return 0;\n    }\n  );\n  return events;\n};\n\nWaterfall.escapeHTML = function(string) {\n  assert(typeof string === 'string');\n  string = string.replace(/[^a-zA-Z0-9. -]+/g, ' ');\n  string = string.replace(/\\s+/g, ' ');\n  string = string.trim();\n  return string;\n};\n\nWaterfall.escapeShell = function(string) {\n  assert(typeof string === 'string');\n  string = string.replace(/[^a-zA-Z0-9. -]+/g, ' ');\n  string = string.replace(/\\s+/g, ' ');\n  string = string.trim();\n  // Replace leading hyphens which are disastrous in the shell:\n  string = string.replace(/^-+/g, '');\n  return string;\n};\n\nWaterfall.html = function(events, options) {\n  var self = this;\n  const width = 820;\n  const epoch = events.length ? events[0].start : 0;\n  const range = events.length ? self.maxTimestamp(events) - epoch : 0;\n  var rows = '';\n  var count = 0;\n  var right = 0;\n  var sum = 0;\n  events.forEach(\n    function(event) {\n      var labelEscaped = self.escapeHTML(event.label);\n      // Match an event label against a label prefix:\n      function match(prefix) {\n        var normalizedLabel = labelEscaped.toLowerCase().trim();\n        var normalizedPrefix = self.escapeHTML(prefix.toLowerCase().trim());\n        return normalizedLabel.indexOf(normalizedPrefix) === 0;\n      }\n      // Decide on the bar color for this event:\n      // TODO: Auto-detect label prefixes using colon and use the same\n      // Hue-Saturation with changing Lightness for different label prefixes.\n      // For example: These are \"watery\" colors with the same Hue-Saturation:\n      // #67abff\n      // #338fff\n      // #c8e1ff\n      var barcolor = '#67abff';\n      options.barcolor.some(\n        function(value) {\n          if (/:/.test(value)) {\n            var parts = value.split(':');\n            var prefix = parts[0].replace(/^\"|\"$/);\n            if (match(prefix)) {\n              barcolor = parts[1];\n              return true;\n            } else {\n              return false;\n            }\n          } else {\n            barcolor = value;\n            return false;\n          }\n        }\n      );\n      if (/^#[a-f0-9]{1,6}$/i.test(barcolor)) {\n        var barcolorEscaped = barcolor;\n      } else {\n        var barcolorEscaped = self.escapeHTML(barcolor);\n      }\n      if (!/^(#[a-f0-9]{1,6}|[a-z]+)$/i.test(barcolorEscaped)) {\n        throw new Error('bad bar color: ' + JSON.stringify(options.barcolor));\n      }\n      // Decide whether event should be counted in causal sum:\n      var exclude = options.exclude.some(\n        function(prefix) {\n          return match(prefix);\n        }\n      );\n      var elapsed = event.end - event.start;\n      var widthGap = Math.round((event.start - epoch) / range * width);\n      var widthBar = Math.max(Math.round(elapsed / range * width), 1);\n      var row = self.HTML_ROW;\n      row = row.replace('{LABEL}', labelEscaped);\n      row = row.replace('{GAP}', self.escapeHTML(widthGap.toString()));\n      row = row.replace('{BAR}', self.escapeHTML(widthBar.toString()));\n      row = row.replace('{BAR_COLOR}', barcolorEscaped);\n      row = row.replace(\n        '{ELAPSED}',\n        self.escapeHTML(elapsed.toString() + ' ' + options.unit)\n      );\n      rows += row;\n      if (!exclude) {\n        if (event.end > right) {\n          sum += event.end - Math.max(right, event.start);\n          right = event.end;\n        }\n        count++;\n      }\n    }\n  );\n  var html = self.HTML_CHART;\n  html = html.replace('{SUMMARY}',\n    '<div class=\"summary\">' +\n    self.escapeHTML(count + ' Event' + (count == 1 ? '' : 's')) + ' / ' +\n    self.escapeHTML(sum + ' ' + options.unit + ' Sum') + ' / ' +\n    self.escapeHTML(range + ' ' + options.unit + ' Total') +\n    '</div>'\n  );\n  html = html.replace('{ROWS}', rows);\n  return html;\n};\n\nWaterfall.maxTimestamp = function(events) {\n  var self = this;\n  var max = 0;\n  events.forEach(\n    function(event, index) {\n      assert(event.end >= event.start);\n      assert(typeof event.label === 'string');\n      if (index > 0) {\n        var previous = events[index - 1];\n        if (previous.start === event.start) {\n          assert(previous.end >= event.end);\n        } else {\n          assert(previous.start < event.start);\n        }\n      }\n      if (event.end > max) max = event.end;\n    }\n  );\n  return max;\n};\n\nWaterfall.png = function(html, width, height, options) {\n  var self = this;\n  var chrome = self.CHROME_PATH();\n  if (!chrome) throw new Error('platform not supported');\n  var nameEscaped = self.escapeShell(options.name) || 'waterfall';\n  // TODO: Change cwd of chrome process so we can avoid Windows escaping issues.\n  // This can happen where os.tmpdir contains Windows special characters (&).\n  var tmpdir = Node.os.tmpdir();\n  var path = {\n    html: Node.path.join(tmpdir, nameEscaped + '.html'),\n    png: Node.path.join(tmpdir, nameEscaped + '.png')\n  };\n  assert(Number.isInteger(width) && width > 0);\n  assert(Number.isInteger(height) && height > 0);\n  var widthEscaped = self.escapeShell(width.toString());\n  var heightEscaped = self.escapeShell(height.toString());\n  assert(typeof chrome === 'string');\n  // We need to use double quotes ourselves for escaping any special characters:\n  assert(!/\"/.test(chrome));\n  assert(!/\"/.test(path.html));\n  assert(!/\"/.test(path.png));\n  var args = [\n    '--headless',\n    '--hide-scrollbars',\n    '--window-size=' + widthEscaped + ',' + heightEscaped,\n    '--screenshot=\"' + path.png + '\"',\n    '\"' + path.html + '\"'\n  ];\n  Node.fs.writeFileSync(path.html, html, 'utf-8');\n  Node.child.execSync('\"' + chrome + '\" ' + args.join(' '), {\n    cwd: Node.process.cwd(),\n    stdio: ['inherit', 'inherit', 'ignore']\n  });\n  var png = Node.fs.readFileSync(path.png);\n  Node.fs.unlinkSync(path.html);\n  Node.fs.unlinkSync(path.png);\n  return png;\n};\n\nWaterfall.CHROME_PATH = function() {\n  if (Node.process.platform === 'darwin') {\n    return '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome';\n  } else if (Node.process.platform === 'win32') {\n    // TODO\n  } else if (Node.process.platform === 'linux') {\n    // TODO\n  }\n};\n\nWaterfall.HTML_CHART = `<html>\n  <head>\n    <title>Waterfall</title>\n    <style>\n      * {\n        box-sizing: border-box;\n      }\n      html, body {\n        margin: 0;\n        padding: 0;\n      }\n      .waterfall {\n        border: 1px solid #DDD;\n        width: 1280px;\n      }\n      .row {\n        align-items: center;\n        color: #444;\n        display: flex;\n        flex-direction: row;\n        font: 12px Helvetica;\n        height: 20px;\n        letter-spacing: 0px;\n        overflow: hidden;\n        width: 100%;\n      }\n      .row:nth-child(even) {\n        background: #F8F8F8;\n      }\n      .label {\n        flex: none;\n        padding: 0px 5px 0px 5px;\n        width: 400px;\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n      }\n      .gap {\n        border-left: 1px solid #DDD;\n        flex: none;\n        height: 100%;\n      }\n      .bar {\n        flex: none;\n        height: 20px;\n      }\n      .elapsed {\n        flex: none;\n        padding-left: 5px;\n      }\n      .summary {\n        color: #444;\n        font: 12px Helvetica;\n        font-weight: 300;\n        height: 20px;\n        padding: 5px 5px 0px 0px;\n        text-align: right;\n        width: 1280px;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"waterfall\">{ROWS}\n    </div>\n    {SUMMARY}\n  </body>\n</html>\n`;\n\nWaterfall.HTML_ROW = `\n      <div class=\"row\">\n        <div class=\"label\">{LABEL}</div>\n        <div class=\"gap\" style=\"width:{GAP}px\"></div>\n        <div class=\"bar\" style=\"width:{BAR}px;background:{BAR_COLOR}\"></div>\n        <div class=\"elapsed\">{ELAPSED}</div>\n      </div>`;\n\nmodule.exports = Waterfall;\n"]}